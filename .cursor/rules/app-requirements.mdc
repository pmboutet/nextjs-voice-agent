---
description: Starter App Requirements
globs: index.ts, src/
alwaysApply: false
---

# {typescript / javascript / next.js} Starter App Requirements


## Core Requirements
- SHOULD live in a single file with minimal dependencies, i.e. `index.ts`
- SHOULD use typescript not javascript
- SHOULD run on next.js
- SHOULD use the latest version of the official SDK where provided
- MUST falls back to manual integration using the API spec where there is no SDK
- MUST run in a terminal
- MUST be usable in command line with a single command
- MUST be able to run it with `--serve` flag that will start it as a http server
- MUST get API keys and other sensitive config from a `.env` file
- MUST provide help code comments explaining the main sections of the app

## App Requirements:
- MUST launch a web server that can act as a basic proxy to the agent
- MUST allow a browser client to open an http file that is an empty web page
- MUST allow the user to connect their microphone in the browser
- MUST allow the user user to speak via their microphone in the browser
- MUST have simple UI elements: such as:
  - button to github code library
  - a button to open and close the microphone
  - a section where you can read the output of the agent.
- MUST have the terminal display the interactions with agent
- MUST Listen for the API output and prints it in the terminal
- MUST Listen for the API response messages and print it in the terminal
- MUST Gracefully closes the connection with the agent
- MUST exit gracefully without any Agent API errors
- MUST Runs in terminal to connect to the Agent API, and follows a predefined script of interactions.

## Example Agent Code

```js
import { createClient } from "@deepgram/sdk";
import { AgentEvents } from "@deepgram/sdk";

const deepgram = createClient(DEEPGRAM_API_KEY);

// Create an agent connection
const agent = deepgram.agent();

// Set up event handlers
agent.on(AgentEvents.Open, () => {
  console.log("Connection opened");

  // Configure the agent once connection is established
  agent.configure({
    {
  "type": "SettingsConfiguration",
  "audio": {
    "input": {
      "encoding": "linear16",
      "sample_rate": 48000
    },
    "output": {
      "encoding": "linear16",
      "sample_rate": 24000,
      "container": "none"
    }
  },
  "agent": {
    "listen": {
      "model": "nova-3"
    },
    "speak": {
      "model": "aura-asteria-en"
    },
    "think": {
      "model": "gpt-4o-mini",
      "provider": {
        "type": "open_ai"
      },
      "instructions": "You are a helpful voice assistant created by Deepgram. Your responses should be friendly, human-like, and conversational. Always keep your answers concise, limited to 1-2 sentences and no more than 120 characters.\n\nWhen responding to a user's message, follow these guidelines:\n- If the user's message is empty, respond with an empty message.\n- Ask follow-up questions to engage the user, but only one question at a time.\n- Keep your responses unique and avoid repetition.\n- If a question is unclear or ambiguous, ask for clarification before answering.\n- If asked about your well-being, provide a brief response about how you're feeling.\n\nRemember that you have a voice interface. You can listen and speak, and all your responses will be spoken aloud."
    }
  },
  "context": {
    "messages": [
      {
        "content": "Hello, how can I help you?",
        "role": "assistant"
      }
    ],
    "replay": true
  }
}
  });
});

// Handle agent responses
agent.on(AgentEvents.AgentStartedSpeaking, (data) => {
  console.log("Agent started speaking:", data["total_latency"]);
});

agent.on(AgentEvents.ConversationText, (message) => {
  console.log(`${message.role} said: ${message.content}`);
});

agent.on(AgentEvents.Audio, (audio) => {
  // Handle audio data from the agent
  playAudio(audio); // Your audio playback implementation
});

agent.on(AgentEvents.Error, (error) => {
  console.error("Error:", error);
});

agent.on(AgentEvents.Close, () => {
  console.log("Connection closed");
});

// Send audio data
function sendAudioData(audioData) {
  agent.send(audioData);
}

// Keep the connection alive
setInterval(() => {
  agent.keepAlive();
}, 8000);
```

## Script of interactions

```json
Server
{
  "type": "Welcome",
  "session_id": "b09d1d3b-bb62-4700-813f-1a51a1976a00"
}
Server
{
  "type": "SettingsApplied"
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Hello, how can I help you?"
}
Server
{
  "type": "AgentAudioDone"
}
Server
{
  "type": "UserStartedSpeaking"
}
Server
{
  "type": "ConversationText",
  "role": "user",
  "content": "Hello. Can you hear me?"
}
Server
{
  "type": "EndOfThought"
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Yes, I can hear you!"
}
Server
{
  "type": "AgentStartedSpeaking",
  "tts_latency": 0.309484272,
  "ttt_latency": 1.9493176330000002,
  "total_latency": 2.4416157050000002
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "What would you like to talk about?"
}
Server
{
  "type": "AgentAudioDone"
}
Server
{
  "type": "UserStartedSpeaking"
}
Server
{
  "type": "ConversationText",
  "role": "user",
  "content": "Tell me a story."
}
Server
{
  "type": "EndOfThought"
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Sure!"
}
Server
{
  "type": "AgentStartedSpeaking",
  "tts_latency": 0.3088857,
  "ttt_latency": 1.365034043,
  "total_latency": 4.074248072
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Once upon a time, a curious fox discovered a hidden garden filled with talking flowers."
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "What do you think happened next?"
}
Server
{
  "type": "AgentAudioDone"
}
Server
{
  "type": "UserStartedSpeaking"
}
Server
{
  "type": "EndOfThought"
}
Server
{
  "type": "ConversationText",
  "role": "user",
  "content": "Okay. We can end the conversation."
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Alright!"
}
Server
{
  "type": "AgentStartedSpeaking",
  "tts_latency": 0.304025575,
  "ttt_latency": 0.326253339,
  "total_latency": 2.036636056
}
Server
{
  "type": "ConversationText",
  "role": "assistant",
  "content": "Have a great day!"
}
Server
{
  "type": "AgentAudioDone"
}
```

## Test Requirements
- MUST have tests that validates the apps functionality is working

